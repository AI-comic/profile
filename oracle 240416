create or replace view v_emp
as
    select e.ename, d.dname
    from emp e, dept d
    where e.deptno = d.deptno;

select e.deptno, d.dname, e.sal
from(select deptno, max(sal) sal
    from emp
    group by deptno) e, dept d
where e.deptno = d.deptno;

select deptno, max(sal)
from emp
group by deptno;

select deptno, profno, name
from professor;

select decode(deptno, ndeptno, null, deptno) deptno, profno, name
from (select lag(deptno) over (order by deptno) ndeptno, deptno, profno, name
    from professor);
    
select lag(deptno) over(order by deptno) ndeptno, deptno, profno, name
    from professor;
    
select view_name, text, read_only
from user_views;

drop view v_emp1;

create materialized view m_prof
build immediate
refresh
on demand
complete
enable query rewrite
as
    select profno, name, pay
    from professor;
    
create index idx_m_prof_pay
on m_prof(pay);

--수동으로 원본 테이블과 구체화된 뷰의 데이터 동기화 방법
delete from professor
where profno=5001;

commit;

select count(*) from professor;
select count(*) from m_prof;

--dbms_mview 패키지로 동기화 수행 방법
--BEGIN
--    DBMS_MVIEW.REFRESH('M_PROF');
--END;

exec dbms_mview.refresh_all_mviews;

--mview 조회하기/삭제하기
select mview_name, query
from user_mviews
where mview_name='M_PROF';

drop materialized view m_prof;

--연습문제1. Professor 테이블과 department 테이블을 조인하여
--          교수번호와 교수이름, 소속 학과이름을 조회하는 view 를생성하세요. View 이름은 v_prof_dept2
create or replace view v_prof_dept2
as
    select profno, name, dname
    from professor p, department d
    where p.deptno = d.deptno;

--연습문제2. Inline View 를 사용하여 아래 그림과 같이 Student 테이블과 department 테이블을 사용하여
--          학과별로 학생들의 최대 키와 최대 몸무게, 학과이름을 출력
select d.dname, max_height, max_weight
from(select deptno1, max(height) max_height, max(weight) max_weight
    from student
    group by deptno1) s, department d
where s.deptno1 = d.deptno;

--연습문제3. Student 테이블과 department 테이블을 사용하여 학과이름 , 학과별 최대키 ,
--          학과별로 가장 키가 큰 학생들의 이름과 키 를 Inline View 를 사용하여 아래와 같이 출력
select d.dname, a.max_height, s.name, s.height
FROM(SELECT deptno1, max(height) max_height
    FROM student
    group by deptno1) a, student s, department d
where s.deptno1 = a.deptno1         --세 테이블을 합하는 join 과정
and s.height = a.max_height
and s.deptno1 = d.deptno;

SELECT deptno1, max(height) max_height
    FROM student
    group by deptno1;   --학과별 최대 키를 추출 -> 위에서 a로 할당한다

--연습문제4. Student 테이블에서 학생의 키가 동일 학년의 평균 키 보다 큰 학생들의 학년과 이름과 키,
--          해당 학년의 평균 키를 출력하되 Inline View 를 사용해서 아래와 같이 출력
select s.grade, s.name, s.height, a.avg_height
from(SELECT grade, avg(height) avg_height
    FROM student
    group by grade) a, student s
where a.grade = s.grade
and s.height > a.avg_height
ORDER BY 1;

--연습문제5. professor 테이블을 조회하여 아래와 같이 교수들의 급여순위와 이름과 급여를 출력하시오
--          단 급여순위는 급여가 많은 사람부터 1위~5위까지 출력
select rownum "ranking", name, pay
from(SELECT name, pay
    FROM professor
    ORDER by 2 desc)
where rownum between 1 and 5;
    
--연습문제6. 아래 화면과 같이 교수 테이블을 교수 번호로 정렬한 후 출력하되 3 건씩 분리해서
--          급여 합계와 급여 평균을 출력
select num, profno, name, pay, sum(pay), round(avg(pay),1)
from(select profno, name, pay, rownum num
    from professor)
group by ceil(num/3), rollup((profno, name, pay, num))
ORDER BY ceil(num/3);

