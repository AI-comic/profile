// https://campus.programmers.co.kr/tryouts/129963/challenges?language=python3
한 개 이상의 항의 합으로 이루어진 식을 다항식이라고 합니다. 다항식을 계산할 때는 동류항끼리 계산해 정리합니다.
덧셈으로 이루어진 다항식 polynomial이 매개변수로 주어질 때, 동류항끼리 더한 결괏값을 문자열로 return 하도록 solution 함수를 완성해보세요.
같은 식이라면 가장 짧은 수식을 return 합니다.

def solution(polynomial):
    poly_list = polynomial.split()
    
    x = 0
    s = 0
    
    for p in poly_list:
        if p[-1] == 'x':
            if p[:-1]:
                x += int(p[:-1])
            else:
                x += 1
        elif p.isdigit():
            s += int(p)
    if x == 1:
        if s > 0:
            return f"x + {s}"
        else:
            return "x"
    elif x > 1:
        if s > 0:
            return f"{x}x + {s}"
        else:
            return f"{x}x"
    else:
        return f"{s}"
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129964/challenges?language=python3
머쓱이는 태어난 지 6개월 된 조카를 돌보고 있습니다.
조카는 아직 "aya", "ye", "woo", "ma" 네 가지 발음을 최대 한 번씩 사용해 조합한(이어 붙인) 발음밖에 하지 못합니다.
문자열 배열 babbling이 매개변수로 주어질 때, 머쓱이의 조카가 발음할 수 있는 단어의 개수를 return하도록 solution 함수를 완성해주세요.

def solution(babbling):
    answer = 0
    for bab in babbling:
        bab = bab.replace("aya", "0")
        bab = bab.replace("ye", "0")
        bab = bab.replace("woo", "0")
        bab = bab.replace("ma", "0")
        if bab.isdigit():
            answer += 1
    return answer
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129965/challenges?language=python3
덧셈, 뺄셈 수식들이 'X [연산자] Y = Z' 형태로 들어있는 문자열 배열 quiz가 매개변수로 주어집니다.
수식이 옳다면 "O"를 틀리다면 "X"를 순서대로 담은 배열을 return하도록 solution 함수를 완성해주세요.

def solution(quiz):
    answer = []
    
    for q in quiz:
        exp, result = q.split('=')
        exp_result = eval(exp)
        if exp_result == int(result):
            answer.append("O")
        else:
            answer.append("X")
        
    return answer
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129966/challenges?language=python3
등차수열 혹은 등비수열 common이 매개변수로 주어질 때, 마지막 원소 다음으로 올 숫자를 return 하도록 solution 함수를 완성해보세요.

def solution(common):
    first = common[0]
    second = common[1]
    third = common[2]
    last = common[-1]
    
    if second - first == third - second:
        answer = last + (second - first)
    else:
        answer = last * (second / first)
    
    return answer
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129967/challenges?language=python3
점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다.
[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
주어진 네 개의 점을 두 개씩 이었을 때, 두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 solution 함수를 완성해보세요.

def solution(dots):
    [[x1, y1], [x2, y2], [x3, y3], [x4, y4]] = dots
    
    if (y1 - y2) / (x1 - x2) == (y3 - y4) / (x3 - x4):
        return 1
    if (y1 - y3) / (x1 - x3) == (y2 - y4) / (x2 - x4):
        return 1
    if (y1 - y4) / (x1 - x4) == (y3 - y2) / (x3 - x2):
        return 1
    return 0
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129968/challenges?language=python3
첫 번째 분수의 분자와 분모를 뜻하는 numer1, denom1, 두 번째 분수의 분자와 분모를 뜻하는 numer2, denom2가 매개변수로 주어집니다.
두 분수를 더한 값을 기약 분수로 나타냈을 때 분자와 분모를 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.

import math
def solution(numer1, denom1, numer2, denom2):
    denom = denom1 * denom2
    numer = numer1 * denom2 + numer2 * denom1
    gcd = math.gcd(denom,numer)
    denom = denom / gcd
    numer = numer / gcd
    return [numer, denom]
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129969/challenges?language=python3
연속된 세 개의 정수를 더해 12가 되는 경우는 3, 4, 5입니다. 두 정수 num과 total이 주어집니다.
연속된 수 num개를 더한 값이 total이 될 때, 정수 배열을 오름차순으로 담아 return하도록 solution함수를 완성해보세요.

def solution(num, total):
    num_list = [i for i in range(-1000,1001)]
    l = 0
    r = num
    
    while sum(num_list[l:r]) != total:
        l+=1
        r+=1
    return num_list[l:r]
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129970/challenges?language=python3
다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다.

지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다.
지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.

def solution(board):
    n = len(board)
    answer = n * n

    for i in range(n):
        for j in range(n):
            if board[i][j] == 1:
                answer -= 1
            elif 0 <= i - 1 < n and 0 <= j - 1 < n and board[i-1][j-1] == 1:
                answer -= 1
            elif 0 <= i - 1 < n and 0 <= j < n and board[i-1][j] == 1:
                answer -= 1
            elif 0 <= i - 1 < n and 0 <= j + 1 < n and board[i-1][j+1] == 1:
                answer -= 1
            elif 0 <= i < n and 0 <= j + 1 < n and board[i][j+1] == 1:
                answer -= 1
            elif 0 <= i + 1 < n and 0 <= j + 1 < n and board[i+1][j+1] == 1:
                answer -= 1
            elif 0 <= i + 1 < n and 0 <= j < n and board[i+1][j] == 1:
                answer -= 1
            elif 0 <= i + 1 < n and 0 <= j - 1 < n and board[i+1][j-1] == 1:
                answer -= 1
            elif 0 <= i < n and 0 <= j - 1 < n and board[i][j-1] == 1:
                answer -= 1
            
    return answer
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129971/challenges?language=python3
선분 3개가 평행하게 놓여 있습니다.
세 선분의 시작과 끝 좌표가 [[start, end], [start, end], [start, end]] 형태로 들어있는 2차원 배열 lines가 매개변수로 주어질 때,
두 개 이상의 선분이 겹치는 부분의 길이를 return 하도록 solution 함수를 완성해보세요.

lines가 [[0, 2], [-3, -1], [-2, 1]]일 때 그림으로 나타내면 다음과 같습니다.
선분이 두 개 이상 겹친 곳은 [-2, -1], [0, 1]로 길이 2만큼 겹쳐있습니다.

def solution(lines):
    dots = [0] * 201
    answer = 0
    
    for line in lines:
        start = line[0]
        end = line[1]
        for i in range(start + 100, end + 100):
            dots[i] += 1
            
    for dot in dots:
        if dot > 1:
            answer += 1
            
    return answer
---------------------------------------------------------------------------------
// https://campus.programmers.co.kr/tryouts/129972/challenges?language=python3
최빈값은 주어진 값 중에서 가장 자주 나오는 값을 의미합니다.
정수 배열 array가 매개변수로 주어질 때, 최빈값을 return 하도록 solution 함수를 완성해보세요.
최빈값이 여러 개면 -1을 return 합니다.

def solution(array):
    count_list = [0] * 1000
    
    for i in array:
        count_list[i] += 1
        
    max_count = -1
    answer = -1
    
    for i, v in enumerate(count_list):
        if max_count < v:
            max_count = v
            answer = i
        elif max_count == v:
            answer = -1
    
    return answer
